{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","require","Chart","props","getInitialOption","title","left","tooltip","trigger","formatter","data","isNaN","value","name","seriesName","visualMap","min","max","top","calculable","inRange","color","toolbox","show","orient","feature","dataView","readOnly","restore","saveAsImage","series","type","mapType","label","normal","emphasis","state","option","this","loaded","text","province","subtext","confirmed","dead","healed","cities","map","x","city","echarts","style","height","width","notMerge","lazyUpdate","Component","App","onChange","activeKey","setState","updateData","panes","key","disabled","getDefaultKey","exec","window","cname","m","filter","length","axios","get","then","result","panef","indexOf","error","console","className","pane","tab","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.449062b5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactEchartsCore from 'echarts-for-react/lib/core'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/map';\nimport 'echarts/lib/component/title';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/visualMap';\nimport 'echarts/lib/component/toolbox';\nimport axios from 'axios';\nimport './App.css';\nimport {Tabs} from 'antd';\n\nconst {TabPane} = Tabs;\n\nrequire('echarts/map/js/province/beijing.js');\nrequire('echarts/map/js/province/tianjin.js');\nrequire('echarts/map/js/province/hebei.js');\nrequire('echarts/map/js/province/neimenggu.js');\nrequire('echarts/map/js/province/liaoning.js');\nrequire('echarts/map/js/province/jilin.js');\nrequire('echarts/map/js/province/heilongjiang.js');\nrequire('echarts/map/js/province/jiangsu.js');\nrequire('echarts/map/js/province/zhejiang.js');\nrequire('echarts/map/js/province/anhui.js');\nrequire('echarts/map/js/province/fujian.js');\nrequire('echarts/map/js/province/jiangxi.js');\nrequire('echarts/map/js/province/henan.js');\nrequire('echarts/map/js/province/hunan.js');\nrequire('echarts/map/js/province/guangdong.js');\nrequire('echarts/map/js/province/guangxi.js');\nrequire('echarts/map/js/province/hainan.js');\nrequire('echarts/map/js/province/guizhou.js');\nrequire('echarts/map/js/province/yunnan.js');\nrequire('echarts/map/js/province/xizang.js');\nrequire('echarts/map/js/province/shanxi1.js');\nrequire('echarts/map/js/province/qinghai.js');\nrequire('echarts/map/js/province/ningxia.js');\nrequire('echarts/map/js/province/xinjiang.js');\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            option: this.getInitialOption(),\n        };\n    }\n\n    getInitialOption = () => {\n        return {\n            title: {\n                left: 'center'\n            },\n            tooltip: {\n                trigger: 'item',\n                formatter: function (data) {\n                    return isNaN(data.value) ? data.name :\n                        (data.name + \"<br/>\" + data.seriesName + ':' + data.value);\n                }\n            },\n            visualMap: {\n                min: 0,\n                max: 800,\n                left: 'left',\n                top: 'bottom',\n                calculable: true,\n                inRange: {\n                    color: ['#f6ea8c', '#f26d5b', '#c03546', '#492540']\n                }\n            },\n            toolbox: {\n                show: true,\n                orient: 'vertical',\n                left: 'right',\n                top: 'center',\n                feature: {\n                    dataView: {readOnly: false},\n                    restore: {},\n                    saveAsImage: {}\n                }\n            },\n            series: [\n                {\n                    name: '累计确诊',\n                    type: 'map',\n                    mapType: null,\n                    label: {\n                        normal: {\n                            show: true\n                        },\n                        emphasis: {\n                            show: true\n                        }\n                    },\n                    data: []\n                }\n            ]\n        };\n    };\n\n    render() {\n        if (this.props.loaded) {\n            const option = this.state.option;\n            option.title.text = this.props.data.province + '新冠肺炎 2019-nCoV 爆发最新疫情情况';\n            option.title.subtext = '累计确诊病例:' + this.props.data.confirmed + ' 累计死亡病例:' + this.props.data.dead + ' 累计治愈病例:' + this.props.data.healed;\n            option.series[0].mapType = this.props.data.province;\n            option.series[0].data = this.props.data.cities.map(x => {\n                return {'name': x.city, 'value': x.confirmed}\n            });\n            option.series[0].label.normal.show = this.props.data.province!==\"海南\";\n            return (\n                <ReactEchartsCore\n                    echarts={echarts}\n                    style={{height: '700px', width: '100%'}}\n                    notMerge={true}\n                    lazyUpdate={true}\n                    option={option}/>\n            )\n        }\n        return (<div/>)\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        const panes = [\n            {title: '北京', key: 'beijing', disabled: false, data: {}},\n            {title: '天津', key: 'tianjin', disabled: false, data: {}},\n            {title: '河北', key: 'hebei', disabled: false, data: {}},\n            {title: '山西', key: 'shanxi', disabled: true, data: {}},\n            {title: '内蒙古', key: 'neimenggu', disabled: false, data: {}},\n            {title: '辽宁', key: 'liaoning', disabled: false, data: {}},\n            {title: '吉林', key: 'jilin', disabled: false, data: {}},\n            {title: '黑龙江', key: 'heilongjiang', disabled: false, data: {}},\n            {title: '上海', key: 'shanghai', disabled: true, data: {}},\n            {title: '江苏', key: 'jiangsu', disabled: false, data: {}},\n            {title: '浙江', key: 'zhejiang', disabled: false, data: {}},\n            {title: '安徽', key: 'anhui', disabled: false, data: {}},\n            {title: '福建', key: 'fujian', disabled: false, data: {}},\n            {title: '江西', key: 'jiangxi', disabled: false, data: {}},\n            {title: '山东', key: 'shandong', disabled: true, data: {}},\n            {title: '河南', key: 'henan', disabled: false, data: {}},\n            {title: '湖北', key: 'hubei', disabled: true, data: {}},\n            {title: '湖南', key: 'hunan', disabled: false, data: {}},\n            {title: '广东', key: 'guangdong', disabled: false, data: {}},\n            {title: '广西', key: 'guangxi', disabled: false, data: {}},\n            {title: '海南', key: 'hainan', disabled: false, data: {}},\n            {title: '重庆', key: 'chongqing', disabled: true, data: {}},\n            {title: '四川', key: 'sichuan', disabled: true, data: {}},\n            {title: '贵州', key: 'guizhou', disabled: false, data: {}},\n            {title: '云南', key: 'yunnan', disabled: false, data: {}},\n            {title: '西藏', key: 'xizang', disabled: false, data: {}},\n            {title: '陕西', key: 'shaanxi', disabled: false, data: {}},\n            {title: '甘肃', key: 'gansu', disabled: true, data: {}},\n            {title: '青海', key: 'qinghai', disabled: false, data: {}},\n            {title: '宁夏', key: 'ningxia', disabled: false, data: {}},\n            {title: '新疆', key: 'xinjiang', disabled: false, data: {}},\n            {title: '香港', key: 'hongkong', disabled: true, data: {}},\n            {title: '澳门', key: 'macao', disabled: true, data: {}},\n            {title: '台湾', key: 'taiwan', disabled: true, data: {}},\n        ];\n        this.state = {\n            activeKey: this.getDefaultKey(panes),\n            panes,\n            loaded: false\n        };\n    }\n\n    getDefaultKey(panes) {\n        const province = /(.*?)[省市特自]/.exec(window[\"returnCitySN\"].cname)[1];\n        const m = panes.filter(x => {\n            return x.title === province && !x.disabled;\n        });\n        if (m.length > 0)\n            return m[0].key;\n        return \"beijing\"\n    }\n\n    updateData(key) {\n        axios.get(\"https://service-r8373tyc-1253891892.gz.apigw.tencentcs.com/api/v1/provinces/\" + key).then(\n            result => {\n                const panes = this.state.panes;\n                const panef = panes.filter(x => {\n                    return x.key === key;\n                });\n                panes[panes.indexOf(panef[0])].data = result.data;\n                this.setState({\n                    panes: panes,\n                    loaded: true,\n                })\n            },\n            error => {\n                console.error(error)\n            }\n        );\n    }\n\n    componentDidMount() {\n        this.updateData(this.state.activeKey);\n    }\n\n    onChange = activeKey => {\n        this.setState({activeKey, loaded: false});\n        this.updateData(activeKey);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Tabs\n                    onChange={this.onChange}\n                    activeKey={this.state.activeKey}\n                >\n                    {this.state.panes.map(pane => (\n                        <TabPane tab={pane.title} key={pane.key} disabled={pane.disabled}>\n                            <Chart data={pane.data} loaded={this.state.loaded}/>\n                        </TabPane>\n                    ))}\n                </Tabs>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}