{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","callback","key","console","log","require","Chart","props","getInitialState","option","getOption","isLoaded","title","left","tooltip","trigger","formatter","data","isNaN","value","name","seriesName","visualMap","min","max","top","calculable","toolbox","show","orient","feature","dataView","readOnly","restore","saveAsImage","series","type","mapType","label","normal","emphasis","state","axios","get","this","province","then","result","text","subtext","confirmed","dead","healed","cities","map","x","city","setState","error","style","height","width","notMerge","lazyUpdate","Component","App","className","defaultActiveKey","onChange","tab","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a26e3a27.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactEcharts from 'echarts-for-react'\nimport axios from 'axios';\nimport './App.css';\nimport {Tabs} from 'antd';\n\nconst {TabPane} = Tabs;\n\nfunction callback(key) {\n    console.log(key);\n}\n\nrequire('echarts/map/js/province/beijing.js');\nrequire('echarts/map/js/province/hebei.js');\nrequire('echarts/map/js/province/shanxi.js');\nrequire('echarts/map/js/province/neimenggu.js');\nrequire('echarts/map/js/province/liaoning.js');\nrequire('echarts/map/js/province/fujian.js');\nrequire('echarts/map/js/province/guangdong.js');\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => ({\n        option: this.getOption(),\n        isLoaded: false\n    });\n\n    componentDidMount() {\n        axios.get(\"https://service-r8373tyc-1253891892.gz.apigw.tencentcs.com/api/v1/provinces/\" + this.props.province).then(\n            result => {\n                const data = result.data;\n                const option = this.state.option;\n                option.title.text = data.province + '新冠肺炎 2019-nCoV 爆发最新疫情情况';\n                option.title.subtext = '累计确诊病例:' + data.confirmed + ' 累计死亡病例:' + data.dead + ' 累计治愈病例:' + data.healed;\n                option.series[0].mapType = data.province;\n                option.series[0].data = data.cities.map(x => {\n                    return {'name': x.city, 'value': x.confirmed}\n                });\n                this.setState({\n                    option: option,\n                    isLoaded: true\n                });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            error => {\n                console.error(error)\n            }\n        );\n    }\n\n    getOption = () => {\n        return {\n            title: {\n                left: 'center'\n            },\n            tooltip: {\n                trigger: 'item',\n                formatter: function (data) {\n                    return isNaN(data.value) ? data.name :\n                        (data.name + \"<br/>\" + data.seriesName + ':' + data.value);\n                }\n            },\n            visualMap: {\n                min: 0,\n                max: 500,\n                left: 'left',\n                top: 'bottom',\n                calculable: true\n            },\n            toolbox: {\n                show: true,\n                orient: 'vertical',\n                left: 'right',\n                top: 'center',\n                feature: {\n                    dataView: {readOnly: false},\n                    restore: {},\n                    saveAsImage: {}\n                }\n            },\n            series: [\n                {\n                    name: '确诊',\n                    type: 'map',\n                    mapType: null,\n                    label: {\n                        normal: {\n                            show: true\n                        },\n                        emphasis: {\n                            show: true\n                        }\n                    },\n                    data: []\n                }\n            ]\n        };\n    };\n\n    render() {\n        return !this.state.isLoaded ? <div/> :\n            (\n                <ReactEcharts\n                    style={{height: '700px', width: '100%'}}\n                    notMerge={true}\n                    lazyUpdate={true}\n                    option={this.state.option || {}}/>\n            );\n    }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Tabs defaultActiveKey=\"beijing\" onChange={callback}>\n                    <TabPane tab=\"北京\" key=\"beijing\">\n                        <Chart province=\"beijing\"/>\n                    </TabPane>\n                    <TabPane tab=\"天津\" disabled key=\"tianjin\">\n                        Content of Tab Pane 2\n                    </TabPane>\n                    <TabPane tab=\"河北\" key=\"hebei\">\n                        <Chart province=\"hebei\"/>\n                    </TabPane>\n                    <TabPane tab=\"山西\" disabled key=\"shanxi\">\n                        <Chart province=\"shanxi\"/>\n                    </TabPane>\n                    <TabPane tab=\"内蒙古\" key=\"neimenggu\">\n                        <Chart province=\"neimenggu\"/>\n                    </TabPane>\n                    <TabPane tab=\"辽宁\" key=\"liaoning\">\n                        <Chart province=\"liaoning\"/>\n                    </TabPane>\n                    <TabPane tab=\"吉林\" disabled key=\"jilin\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"黑龙江\" disabled key=\"heilongjiang\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"上海\" disabled key=\"shanghai\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"江苏\" disabled key=\"jiangsu\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"浙江\" disabled key=\"zhejiang\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"安徽\" disabled key=\"anhui\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"福建\" key=\"fujian\">\n                        <Chart province=\"fujian\"/>\n                    </TabPane>\n                    <TabPane tab=\"江西\" disabled key=\"jiangxi\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"山东\" disabled key=\"shandong\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"河南\" disabled key=\"henan\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"湖北\" disabled key=\"hubei\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"湖南\" disabled key=\"hunan\">\n                        Content of Tab Pane 3\n                    </TabPane>\n                    <TabPane tab=\"广东\" key=\"guangdong\">\n                        <Chart province=\"guangdong\"/>\n                    </TabPane>\n                </Tabs>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}