{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","App","props","getInitialState","option","getOption","isLoaded","title","text","subtext","left","tooltip","trigger","formatter","data","isNaN","value","name","seriesName","visualMap","min","max","top","calculable","toolbox","show","orient","feature","dataView","readOnly","restore","saveAsImage","series","type","mapType","label","normal","emphasis","state","axios","get","then","result","province","confirmed","dead","healed","cities","map","x","city","setState","error","console","this","className","style","height","width","notMerge","lazyUpdate","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAKAA,EAAQ,K,IAwGOC,E,YArGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGRC,gBAAkB,iBAAO,CACvBC,OAAQ,EAAKC,YACbC,UAAU,IANO,EAgCnBD,UAAY,WACV,MAAO,CACLE,MAAO,CACLC,KAAM,sFACNC,QAAS,uHACTC,KAAM,UAERC,QAAS,CACPC,QAAS,OACTC,UAAW,SAASC,GAClB,OAAOC,MAAMD,EAAKE,OAAOF,EAAKG,KACzBH,EAAKG,KAAO,QAAUH,EAAKI,WAAa,IAAMJ,EAAKE,QAG5DG,UAAW,CACTC,IAAK,EACLC,IAAK,IACLX,KAAM,OACNY,IAAK,SACLC,YAAY,GAEdC,QAAS,CACPC,MAAM,EACNC,OAAQ,WACRhB,KAAM,QACNY,IAAK,SACLK,QAAS,CACPC,SAAU,CAACC,UAAU,GACrBC,QAAS,GACTC,YAAa,KAGjBC,OAAQ,CACN,CACEf,KAAM,eACNgB,KAAM,MACNC,QAAS,KACTC,MAAO,CACLC,OAAQ,CACNX,MAAM,GAERY,SAAU,CACRZ,MAAM,IAIVX,KAAM,OA5EZ,EAAKwB,MAAQ,EAAKnC,kBAFD,E,iFASC,IAAD,OACjBoC,IAAMC,IAAI,wFAAwFC,MAChG,SAAAC,GACE,IAAM5B,EAAO4B,EAAO5B,KACdV,EAAS,EAAKkC,MAAMlC,OAC1BA,EAAOG,MAAMC,KAAOM,EAAK6B,SAAW,sFACpCvC,EAAOG,MAAME,QAAU,wCAAYK,EAAK8B,UAAY,yCAAa9B,EAAK+B,KAAO,yCAAa/B,EAAKgC,OAC/F1C,EAAO4B,OAAO,GAAGE,QAAUpB,EAAK6B,SAChCvC,EAAO4B,OAAO,GAAGlB,KAAOA,EAAKiC,OAAOC,KAAI,SAAAC,GAAO,MAAO,CAAC,KAAQA,EAAEC,KAAM,MAASD,EAAEL,cAClF,EAAKO,SAAS,CACZ/C,OAAQA,EACRE,UAAU,OAMd,SAAA8C,GACEC,QAAQD,MAAMA,Q,+BAsElB,OAZaE,KAAKhB,MAAMhC,SAEtB,yBAAKiD,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,MAAO,CAACC,OAAQ,QAASC,MAAO,QAChCC,UAAU,EACVC,YAAY,EACZxD,OAAQkD,KAAKhB,MAAMlC,QAAU,OARJ,kC,GAtFnByD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.e17fd8f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react'\nimport axios from 'axios';\nimport './App.css';\n\nrequire('echarts/map/js/province/guangdong.js');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n  getInitialState = () => ({\n    option: this.getOption(),\n    isLoaded: false\n  });\n\n  componentDidMount(){\n    axios.get(\"http://service-r8373tyc-1253891892.gz.apigw.tencentcs.com/api/v1/provinces/guangdong\").then(\n      result => {\n        const data = result.data\n        const option = this.state.option;\n        option.title.text = data.province + '新冠肺炎 2019-nCoV 爆发最新疫情情况';\n        option.title.subtext = '累计确诊病例:' + data.confirmed + ' 累计死亡病例:' + data.dead + ' 累计治愈病例:' + data.healed;\n        option.series[0].mapType = data.province \n        option.series[0].data = data.cities.map(x => { return {'name': x.city, 'value': x.confirmed} })\n        this.setState({\n          option: option,\n          isLoaded: true\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        console.error(error)\n      }\n      );\n  }\n\n  getOption = () => {\n    return {\n      title: {\n        text: '新冠肺炎 2019-nCoV 爆发最新疫情情况',\n        subtext: '累计确诊病例:' + 0 + ' 累计死亡病例:' + 0 + ' 累计治愈病例:' + 0,\n        left: 'center'\n      },\n      tooltip: {\n        trigger: 'item',\n        formatter: function(data){\n          return isNaN(data.value)?data.name:\n              (data.name + \"<br/>\" + data.seriesName + ':' + data.value);\n        }\n      },\n      visualMap: {\n        min: 0,\n        max: 500,\n        left: 'left',\n        top: 'bottom',\n        calculable: true\n      },\n      toolbox: {\n        show: true,\n        orient: 'vertical',\n        left: 'right',\n        top: 'center',\n        feature: {\n          dataView: {readOnly: false},\n          restore: {},\n          saveAsImage: {}\n        }\n      },\n      series: [\n        {\n          name: '确诊',\n          type: 'map',\n          mapType: null,\n          label: {\n            normal: {\n              show: true\n            },\n            emphasis: {\n              show: true\n            }\n          },\n          // data: raw.cities.map(x => { return {'name': x.city, 'value':x.confirmed};})\n          data: []\n        }\n      ]\n    };\n  };\n\n  render(){\n    const res = !this.state.isLoaded?<div/>:\n     (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ReactEcharts\n            style={{height: '700px', width: '100%'}} \n            notMerge={true}\n            lazyUpdate={true}\n            option={this.state.option || {}} />\n          </header>\n      </div>\n    );\n    return res;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}